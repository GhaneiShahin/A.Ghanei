{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar config_1 = __importDefault(require(\"../../config\"));\n\nvar boolean_1 = __importDefault(require(\"./boolean\"));\n\nvar plugin_types_1 = __importDefault(require(\"./plugin-types\"));\n\nvar report_uri_1 = __importDefault(require(\"./report-uri\"));\n\nvar require_sri_for_1 = __importDefault(require(\"./require-sri-for\"));\n\nvar sandbox_1 = __importDefault(require(\"./sandbox\"));\n\nvar source_list_1 = __importDefault(require(\"./source-list\"));\n\nvar checkers = {\n  boolean: boolean_1.default,\n  pluginTypes: plugin_types_1.default,\n  reportUri: report_uri_1.default,\n  requireSriFor: require_sri_for_1.default,\n  sandbox: sandbox_1.default,\n  sourceList: source_list_1.default\n};\n\nmodule.exports = function checkDirective(key, value, options) {\n  if (options.loose) {\n    return;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(config_1.default.directives, key)) {\n    throw new Error(\"\\\"\" + key + \"\\\" is an invalid directive. See the documentation for the supported list. Force this by enabling loose mode.\");\n  } // This cast is safe thanks to the above check.\n\n\n  var directiveType = config_1.default.directives[key].type;\n  checkers[directiveType](key, value);\n};","map":null,"metadata":{},"sourceType":"script"}