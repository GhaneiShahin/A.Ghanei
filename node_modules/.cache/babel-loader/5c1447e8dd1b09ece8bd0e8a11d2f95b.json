{"ast":null,"code":"\"use strict\";\n\nfunction isPlainObject(value) {\n  return Boolean(value && !Array.isArray(value) && typeof value === 'object');\n}\n\nfunction getHeaderValueFromOptions(options) {\n  var FEATURES = {\n    accelerometer: 'accelerometer',\n    ambientLightSensor: 'ambient-light-sensor',\n    autoplay: 'autoplay',\n    camera: 'camera',\n    documentDomain: 'document-domain',\n    documentWrite: 'document-write',\n    encryptedMedia: 'encrypted-media',\n    fontDisplayLateSwap: 'font-display-late-swap',\n    fullscreen: 'fullscreen',\n    geolocation: 'geolocation',\n    gyroscope: 'gyroscope',\n    layoutAnimations: 'layout-animations',\n    legacyImageFormats: 'legacy-image-formats',\n    loadingFrameDefaultEager: 'loading-frame-default-eager',\n    magnetometer: 'magnetometer',\n    microphone: 'microphone',\n    midi: 'midi',\n    notifications: 'notifications',\n    oversizedImages: 'oversized-images',\n    payment: 'payment',\n    pictureInPicture: 'picture-in-picture',\n    push: 'push',\n    serial: 'serial',\n    speaker: 'speaker',\n    syncScript: 'sync-script',\n    syncXhr: 'sync-xhr',\n    unoptimizedImages: 'unoptimized-images',\n    unoptimizedLosslessImages: 'unoptimized-lossless-images',\n    unoptimizedLossyImages: 'unoptimized-lossy-images',\n    unsizedMedia: 'unsized-media',\n    usb: 'usb',\n    verticalScroll: 'vertical-scroll',\n    vibrate: 'vibrate',\n    vr: 'vr',\n    wakeLock: 'wake-lock',\n    xr: 'xr'\n  };\n\n  if (!isPlainObject(options)) {\n    throw new Error('featurePolicy must be called with an object argument. See the documentation.');\n  }\n\n  var features = options.features;\n\n  if (!isPlainObject(features)) {\n    throw new Error('featurePolicy must have a single key, \"features\", which is an object of features. See the documentation.');\n  }\n\n  var result = Object.keys(features).map(function (featureKeyCamelCase) {\n    if (!Object.prototype.hasOwnProperty.call(FEATURES, featureKeyCamelCase)) {\n      throw new Error(\"featurePolicy does not support the \\\"\" + featureKeyCamelCase + \"\\\" feature.\");\n    }\n\n    var featureValue = features[featureKeyCamelCase];\n\n    if (!Array.isArray(featureValue) || featureValue.length === 0) {\n      throw new Error(\"The value of the \\\"\" + featureKeyCamelCase + \"\\\" feature must be a non-empty array.\");\n    }\n\n    var containsStar = false;\n    var containsNone = false;\n    featureValue.forEach(function (allowed) {\n      if (allowed === '*') {\n        containsStar = true;\n      } else if (allowed === \"'none'\") {\n        containsNone = true;\n      } else if (allowed === 'self') {\n        throw new Error(\"'self' must be quoted.\");\n      } else if (allowed === 'none') {\n        throw new Error(\"'none' must be quoted.\");\n      }\n    });\n\n    if (featureValue.length > 1) {\n      if (containsStar) {\n        throw new Error(\"The value of the \\\"\" + featureKeyCamelCase + \"\\\" feature cannot contain * and other values.\");\n      } else if (containsNone) {\n        throw new Error(\"The value of the \\\"\" + featureKeyCamelCase + \"\\\" feature cannot contain 'none' and other values.\");\n      }\n    }\n\n    var featureKeyDashed = FEATURES[featureKeyCamelCase];\n    return [featureKeyDashed].concat(featureValue).join(' ');\n  }).join(';');\n\n  if (result.length === 0) {\n    throw new Error('At least one feature is required.');\n  }\n\n  return result;\n}\n\nmodule.exports = function featurePolicy(options) {\n  var headerValue = getHeaderValueFromOptions(options);\n  return function featurePolicy(_req, res, next) {\n    res.setHeader('Feature-Policy', headerValue);\n    next();\n  };\n};","map":null,"metadata":{},"sourceType":"script"}