{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar config_1 = __importDefault(require(\"./config\"));\n\nfunction goodBrowser() {\n  return ['Content-Security-Policy'];\n}\n\nvar handlersByBrowserName = {\n  'Android Browser': function AndroidBrowser(browser) {\n    var osVersionName = browser.getOS().versionName;\n\n    if (osVersionName && parseFloat(osVersionName) < 4.4) {\n      return [];\n    }\n\n    return ['Content-Security-Policy'];\n  },\n  Chrome: function Chrome(browser) {\n    var browserVersion = parseFloat(browser.getBrowserVersion());\n\n    if (browserVersion >= 14 && browserVersion < 25) {\n      return ['X-WebKit-CSP'];\n    } else if (browserVersion >= 25) {\n      return ['Content-Security-Policy'];\n    } else {\n      return [];\n    }\n  },\n  'Chrome Mobile': function ChromeMobile(browser, options) {\n    if (browser.getOSName() === 'iOS') {\n      return ['Content-Security-Policy'];\n    } else {\n      return handlersByBrowserName['Android Browser'](browser, options);\n    }\n  },\n  Firefox: function Firefox(browser) {\n    var osName = browser.getOSName();\n\n    if (osName === 'iOS') {\n      return ['Content-Security-Policy'];\n    }\n\n    var browserVersion = parseFloat(browser.getBrowserVersion());\n\n    if (osName === 'Android') {\n      if (browserVersion >= 25) {\n        return ['Content-Security-Policy'];\n      } else {\n        return ['X-Content-Security-Policy'];\n      }\n    } else if (browser.getPlatformType(true) === 'mobile') {\n      // This is probably Firefox OS.\n      if (browserVersion >= 32) {\n        return ['Content-Security-Policy'];\n      } else {\n        return ['X-Content-Security-Policy'];\n      }\n    } else if (browserVersion >= 23) {\n      return ['Content-Security-Policy'];\n    } else if (browserVersion >= 4 && browserVersion < 23) {\n      return ['X-Content-Security-Policy'];\n    } else {\n      return [];\n    }\n  },\n  'Internet Explorer': function InternetExplorer(browser) {\n    var browserVersion = parseFloat(browser.getBrowserVersion());\n    var header = browserVersion < 12 ? 'X-Content-Security-Policy' : 'Content-Security-Policy';\n    return [header];\n  },\n  'Microsoft Edge': goodBrowser,\n  'Microsoft Edge Mobile': goodBrowser,\n  Opera: function Opera(browser) {\n    var browserVersion = parseFloat(browser.getBrowserVersion());\n\n    if (browserVersion >= 15) {\n      return ['Content-Security-Policy'];\n    } else {\n      return [];\n    }\n  },\n  Safari: function Safari(browser) {\n    var browserVersion = parseFloat(browser.getBrowserVersion());\n\n    if (browserVersion >= 7) {\n      return ['Content-Security-Policy'];\n    } else if (browserVersion >= 6) {\n      return ['X-WebKit-CSP'];\n    } else {\n      return [];\n    }\n  }\n};\n\nmodule.exports = function getHeaderKeysForBrowser(browser, options) {\n  if (!browser) {\n    return config_1.default.allHeaders;\n  }\n\n  if (options.disableAndroid && browser.getOSName() === 'Android') {\n    return [];\n  }\n\n  var browserName = browser.getBrowserName();\n\n  if (Object.prototype.hasOwnProperty.call(handlersByBrowserName, browserName)) {\n    return handlersByBrowserName[browserName](browser, options);\n  } else {\n    return config_1.default.allHeaders;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}