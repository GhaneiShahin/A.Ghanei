{"ast":null,"code":"var badArgumentsError = new Error('hpkp must be called with a maxAge and at least two SHA-256s (one actually used and another kept as a backup).');\n\nmodule.exports = function hpkp(passedOptions) {\n  var options = parseOptions(passedOptions);\n  var headerKey = getHeaderKey(options);\n  var headerValue = getHeaderValue(options);\n  return function hpkp(req, res, next) {\n    var setHeader = true;\n    var setIf = options.setIf;\n\n    if (setIf) {\n      setHeader = setIf(req, res);\n    }\n\n    if (setHeader) {\n      res.setHeader(headerKey, headerValue);\n    }\n\n    next();\n  };\n};\n\nfunction parseOptions(options) {\n  if (!options) {\n    throw badArgumentsError;\n  }\n\n  if (options.maxage && options.maxAge) {\n    throw badArgumentsError;\n  }\n\n  var maxAge = options.maxAge;\n  var sha256s = options.sha256s;\n  var setIf = options.setIf;\n\n  if (!maxAge || maxAge <= 0) {\n    throw badArgumentsError;\n  }\n\n  if (!sha256s || sha256s.length < 2) {\n    throw badArgumentsError;\n  }\n\n  if (setIf && typeof setIf !== 'function') {\n    throw new TypeError('setIf must be a function.');\n  }\n\n  if (options.reportOnly && !options.reportUri) {\n    throw badArgumentsError;\n  }\n\n  return {\n    maxAge: maxAge,\n    sha256s: sha256s,\n    includeSubDomains: options.includeSubDomains || options.includeSubdomains,\n    reportUri: options.reportUri,\n    reportOnly: options.reportOnly,\n    setIf: setIf\n  };\n}\n\nfunction getHeaderKey(options) {\n  var header = 'Public-Key-Pins';\n\n  if (options.reportOnly) {\n    header += '-Report-Only';\n  }\n\n  return header;\n}\n\nfunction getHeaderValue(options) {\n  var result = options.sha256s.map(function (sha) {\n    return 'pin-sha256=\"' + sha + '\"';\n  });\n  result.push('max-age=' + Math.round(options.maxAge));\n\n  if (options.includeSubDomains) {\n    result.push('includeSubDomains');\n  }\n\n  if (options.reportUri) {\n    result.push('report-uri=\"' + options.reportUri + '\"');\n  }\n\n  return result.join('; ');\n}","map":null,"metadata":{},"sourceType":"script"}