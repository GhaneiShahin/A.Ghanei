{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar camelize_1 = __importDefault(require(\"camelize\"));\n\nvar content_security_policy_builder_1 = __importDefault(require(\"content-security-policy-builder\"));\n\nvar bowser_1 = __importDefault(require(\"bowser\"));\n\nvar is_function_1 = __importDefault(require(\"./lib/is-function\"));\n\nvar check_options_1 = __importDefault(require(\"./lib/check-options\"));\n\nvar contains_function_1 = __importDefault(require(\"./lib/contains-function\"));\n\nvar get_header_keys_for_browser_1 = __importDefault(require(\"./lib/get-header-keys-for-browser\"));\n\nvar transform_directives_for_browser_1 = __importDefault(require(\"./lib/transform-directives-for-browser\"));\n\nvar parse_dynamic_directives_1 = __importDefault(require(\"./lib/parse-dynamic-directives\"));\n\nvar config_1 = __importDefault(require(\"./lib/config\"));\n\nmodule.exports = function csp(options) {\n  check_options_1.default(options);\n  var originalDirectives = camelize_1.default(options.directives || {});\n  var directivesAreDynamic = contains_function_1.default(originalDirectives);\n  var shouldBrowserSniff = options.browserSniff !== false;\n\n  if (shouldBrowserSniff) {\n    return function csp(req, res, next) {\n      var userAgent = req.headers['user-agent'];\n      var browser;\n\n      if (userAgent) {\n        browser = bowser_1.default.getParser(userAgent);\n      } else {\n        browser = undefined;\n      }\n\n      var headerKeys;\n\n      if (options.setAllHeaders || !userAgent) {\n        headerKeys = config_1.default.allHeaders;\n      } else {\n        headerKeys = get_header_keys_for_browser_1.default(browser, options);\n      }\n\n      if (headerKeys.length === 0) {\n        next();\n        return;\n      }\n\n      var directives = transform_directives_for_browser_1.default(browser, originalDirectives);\n\n      if (directivesAreDynamic) {\n        directives = parse_dynamic_directives_1.default(directives, [req, res]);\n      }\n\n      var policyString = content_security_policy_builder_1.default({\n        directives: directives\n      });\n      headerKeys.forEach(function (headerKey) {\n        if (is_function_1.default(options.reportOnly) && options.reportOnly(req, res) || !is_function_1.default(options.reportOnly) && options.reportOnly) {\n          headerKey += '-Report-Only';\n        }\n\n        res.setHeader(headerKey, policyString);\n      });\n      next();\n    };\n  } else {\n    var headerKeys_1 = options.setAllHeaders ? config_1.default.allHeaders : ['Content-Security-Policy'];\n    return function csp(req, res, next) {\n      var directives = parse_dynamic_directives_1.default(originalDirectives, [req, res]);\n      var policyString = content_security_policy_builder_1.default({\n        directives: directives\n      });\n\n      if (is_function_1.default(options.reportOnly) && options.reportOnly(req, res) || !is_function_1.default(options.reportOnly) && options.reportOnly) {\n        headerKeys_1.forEach(function (headerKey) {\n          res.setHeader(headerKey + \"-Report-Only\", policyString);\n        });\n      } else {\n        headerKeys_1.forEach(function (headerKey) {\n          res.setHeader(headerKey, policyString);\n        });\n      }\n\n      next();\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}