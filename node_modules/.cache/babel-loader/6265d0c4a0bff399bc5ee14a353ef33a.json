{"ast":null,"code":"\"use strict\";\n\nfunction parseActionOption(actionOption) {\n  var invalidActionErr = new Error('action must be undefined, \"DENY\", \"ALLOW-FROM\", or \"SAMEORIGIN\".');\n\n  if (actionOption === undefined) {\n    actionOption = 'SAMEORIGIN';\n  } else if (actionOption instanceof String) {\n    actionOption = actionOption.valueOf();\n  }\n\n  var result;\n\n  if (typeof actionOption === 'string') {\n    result = actionOption.toUpperCase();\n  } else {\n    throw invalidActionErr;\n  }\n\n  if (result === 'ALLOWFROM') {\n    result = 'ALLOW-FROM';\n  } else if (result === 'SAME-ORIGIN') {\n    result = 'SAMEORIGIN';\n  }\n\n  if (['DENY', 'ALLOW-FROM', 'SAMEORIGIN'].indexOf(result) === -1) {\n    throw invalidActionErr;\n  }\n\n  return result;\n}\n\nfunction parseDomainOption(domainOption) {\n  if (domainOption instanceof String) {\n    domainOption = domainOption.valueOf();\n  }\n\n  if (typeof domainOption !== 'string') {\n    throw new Error('ALLOW-FROM action requires a string domain parameter.');\n  } else if (!domainOption.length) {\n    throw new Error('domain parameter must not be empty.');\n  }\n\n  return domainOption;\n}\n\nfunction getHeaderValueFromOptions(options) {\n  options = options || {};\n  var action = parseActionOption(options.action);\n\n  if (action === 'ALLOW-FROM') {\n    var domain = parseDomainOption(options.domain);\n    return action + \" \" + domain;\n  } else {\n    return action;\n  }\n}\n\nmodule.exports = function frameguard(options) {\n  var headerValue = getHeaderValueFromOptions(options);\n  return function frameguard(_req, res, next) {\n    res.setHeader('X-Frame-Options', headerValue);\n    next();\n  };\n};","map":null,"metadata":{},"sourceType":"script"}