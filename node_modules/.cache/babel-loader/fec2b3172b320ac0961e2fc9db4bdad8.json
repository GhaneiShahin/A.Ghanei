{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar config_1 = __importDefault(require(\"../../config\"));\n\nvar is_function_1 = __importDefault(require(\"../../is-function\"));\n\nvar notAllowed = ['self', \"'self'\"].concat(config_1.default.unsafes);\n\nmodule.exports = function pluginTypesCheck(key, value) {\n  if (!Array.isArray(value)) {\n    throw new Error(\"\\\"\" + value + \"\\\" is not a valid value for \" + key + \". Use an array of strings.\");\n  }\n\n  if (value.length === 0) {\n    throw new Error(key + \" must have at least one value. To block everything, set \" + key + \" to [\\\"'none'\\\"].\");\n  }\n\n  value.forEach(function (pluginType) {\n    if (!pluginType) {\n      throw new Error(\"\\\"\" + pluginType + \"\\\" is not a valid plugin type. Only non-empty strings are allowed.\");\n    }\n\n    if (is_function_1.default(pluginType)) {\n      return;\n    }\n\n    pluginType = pluginType.valueOf();\n\n    if (typeof pluginType !== 'string' || pluginType.length === 0) {\n      throw new Error(\"\\\"\" + pluginType + \"\\\" is not a valid plugin type. Only non-empty strings are allowed.\");\n    }\n\n    if (notAllowed.indexOf(pluginType) !== -1) {\n      throw new Error(\"\\\"\" + pluginType + \"\\\" does not make sense in \" + key + \". Remove it.\");\n    }\n\n    if (config_1.default.mustQuote.indexOf(pluginType) !== -1) {\n      throw new Error(\"\\\"\" + pluginType + \"\\\" must be quoted in \" + key + \". Change it to \\\"'\" + pluginType + \"'\\\" in your source list. Force this by enabling loose mode.\");\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}